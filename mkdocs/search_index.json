{
    "docs": [
        {
            "location": "/", 
            "text": "ColorHelper\n\ue157\n\n\nColorHelper makes work with colors easier by providing inline color previews in your documents (ST3 build 3118+) and offers tooltips with color previews of stylesheet colors, provides color translation, and allows the storing and accessing of favorite colors in color palettes.  Most features are optionally configurable. For the most part, these tooltips should show any time the cursor is in a CSS, SCSS, or SASS color.  It should also appear when in HTML style attributes.\n\n\n\n\n\n\n\n\nFeatures\n\ue157\n\n\n\n\nInline color previews.\n\n\nUseful tooltip popups that show the previews of selected colors.\n\n\nSupport colors in CSS, SCSS, SASS, and HTML attributes.\n\n\nShow all the colors in a file in a special color palette in the tooltip.\n\n\nAllow saving, accessing, and managing colors in named color palettes all from the tooltip.\n\n\nSelect and insert colors from the color palettes via the tooltip.\n\n\nTranslate an existing color form to a new form the tooltip.  Supports \nrgb\n, \nrgba\n, \nhex\n, \nhexa\n, \nhsl\n, \nhsla\n, \ngray\n, \nhwb\n, and colors names.\n\n\nCan optionally treat \nhexa\n format \n#RRGGBBAA\n as \n#AARRGGBB\n.", 
            "title": "About Markdown Popups"
        }, 
        {
            "location": "/#colorhelper", 
            "text": "ColorHelper makes work with colors easier by providing inline color previews in your documents (ST3 build 3118+) and offers tooltips with color previews of stylesheet colors, provides color translation, and allows the storing and accessing of favorite colors in color palettes.  Most features are optionally configurable. For the most part, these tooltips should show any time the cursor is in a CSS, SCSS, or SASS color.  It should also appear when in HTML style attributes.", 
            "title": "ColorHelper"
        }, 
        {
            "location": "/#features", 
            "text": "Inline color previews.  Useful tooltip popups that show the previews of selected colors.  Support colors in CSS, SCSS, SASS, and HTML attributes.  Show all the colors in a file in a special color palette in the tooltip.  Allow saving, accessing, and managing colors in named color palettes all from the tooltip.  Select and insert colors from the color palettes via the tooltip.  Translate an existing color form to a new form the tooltip.  Supports  rgb ,  rgba ,  hex ,  hexa ,  hsl ,  hsla ,  gray ,  hwb , and colors names.  Can optionally treat  hexa  format  #RRGGBBAA  as  #AARRGGBB .", 
            "title": "Features"
        }, 
        {
            "location": "/installation/", 
            "text": "Package Control\n\ue157\n\n\nThe recommended way to install ColorHelper is via \nPackage Control\n.  Package Control will install the correct branch on your system and keep it up to date.\n\n\n\n\n\n\n\n\nEnsure Package Control is installed.  Instructions are found \nhere\n.\n\n\n\n\n\n\nIn Sublime Text, press \nctrl\n + \nshift\n + \np\n (Win, Linux) or \ncmd\n + \nshift\n + \np\n (Mac OS) to bring up the quick panel and start typing \nPackage Control: Install Package\n.  Select the command and it will show a list of installable plugins.\n\n\n\n\n\n\nStart typing \nColorHelper\n; when you see it, select it.\n\n\n\n\n\n\nRestart to be sure everything is loaded proper.\n\n\n\n\n\n\nEnjoy!\n\n\n\n\n\n\nManual Installation\n\ue157\n\n\n\n\nWarning\n\n\nThis is not the recommended way to install ColorHelper for the average user.  Installing this way \nwill not\n get automatically updated.\n\n\nIf you are forking for a pull request, you should \njust\n clone ColorHelper and run Package Control's \nSatisfy Dependency\n command to get all the dependencies.\n\n\n\n\nFor those who want to install ColorHelper without package control, here are the steps.  It understood that some people for what ever reason will prefer manually and may even have legitimate reasons to do so.  When going this route, you will have to keep all the packages updated yourself.\n\n\n\n\n\n\n\n\nDownload the latest releases of the following dependencies and unpack or git clone in the \nPackages\n folder as shown below:\n\n\n\n\nhttps://bitbucket.org/teddy_beer_maniac/sublime-text-dependency-markupsafe\n -\n \nmarkupsafe\n\n\nhttps://bitbucket.org/teddy_beer_maniac/sublime-text-dependency-jinja2\n -\n \npython-jinja2\n\n\nhttps://github.com/packagecontrol/pygments\n -\n \npygments\n\n\nhttps://github.com/facelessuser/sublime-markdown-popups\n -\n \nmdpopups\n\n\nhttps://github.com/facelessuser/sublime-markdown\n -\n \npython-markdown\n\n\n\n\n\n\n\n\nDownload and unpack or git clone the latest ColorHelper release and unpack as \nColorHelper\n:\n\n\n\n\nhttps://github.com/facelessuser/ColorHelper\n -\n ColorHelper\n\n\n\n\n\n\n\n\nCreate a folder under \nPackages\n called \n00-dependencies\n and under that folder create a file called \n00-dependencies.py\n:\n\n\nCopy the following code to \n00-dependencies.py\n (this code was taken from Package Control):\n\n\nimport\n \nsys\n\n\nimport\n \nos\n\n\nfrom\n \nos.path\n \nimport\n \ndirname\n\n\n\nif\n \nos\n.\nname\n \n==\n \nnt\n:\n\n    \nfrom\n \nctypes\n \nimport\n \nwindll\n,\n \ncreate_unicode_buffer\n\n\n\nimport\n \nsublime\n\n\n\n\nif\n \nsys\n.\nversion_info\n \n=\n \n(\n3\n,):\n\n    \ndef\n \ndecode\n(\npath\n):\n\n        \nreturn\n \npath\n\n\n    \ndef\n \nencode\n(\npath\n):\n\n        \nreturn\n \npath\n\n\n    \nif\n \nos\n.\npath\n.\nbasename\n(\n__file__\n)\n \n==\n \nsys_path.py\n:\n\n        \npc_package_path\n \n=\n \ndirname\n(\ndirname\n(\n__file__\n))\n\n    \n# When loaded as a .sublime-package file, the filename ends up being\n\n    \n# Package Control.sublime-package/Package Control.package_control.sys_path\n\n    \nelse\n:\n\n        \npc_package_path\n \n=\n \ndirname\n(\n__file__\n)\n\n    \nst_version\n \n=\n \nu\n3\n\n\n\nelse\n:\n\n    \ndef\n \ndecode\n(\npath\n):\n\n        \nif\n \nnot\n \nisinstance\n(\npath\n,\n \nunicode\n):\n\n            \npath\n \n=\n \npath\n.\ndecode\n(\nsys\n.\ngetfilesystemencoding\n())\n\n        \nreturn\n \npath\n\n\n    \ndef\n \nencode\n(\npath\n):\n\n        \nif\n \nisinstance\n(\npath\n,\n \nunicode\n):\n\n            \npath\n \n=\n \npath\n.\nencode\n(\nsys\n.\ngetfilesystemencoding\n())\n\n        \nreturn\n \npath\n\n\n    \npc_package_path\n \n=\n \ndecode\n(\nos\n.\ngetcwd\n())\n\n    \nst_version\n \n=\n \nu\n2\n\n\n\n\nst_dir\n \n=\n \ndirname\n(\ndirname\n(\npc_package_path\n))\n\n\n\n\ndef\n \nadd\n(\npath\n,\n \nfirst\n=\nFalse\n):\n\n    \n\n\n    Adds an entry to the beginning of sys.path, working around the fact that\n\n\n    Python 2.6 can\nt import from non-ASCII paths on Windows.\n\n\n\n    :param path:\n\n\n        A unicode string of a folder, zip file or sublime-package file to\n\n\n        add to the path\n\n\n\n    :param first:\n\n\n        If the path should be added at the beginning\n\n\n    \n\n\n    \nif\n \nos\n.\nname\n \n==\n \nnt\n:\n\n        \n# Work around unicode path import issue on Windows with Python 2.6\n\n        \nbuf\n \n=\n \ncreate_unicode_buffer\n(\n512\n)\n\n        \nif\n \nwindll\n.\nkernel32\n.\nGetShortPathNameW\n(\npath\n,\n \nbuf\n,\n \nlen\n(\nbuf\n)):\n\n            \npath\n \n=\n \nbuf\n.\nvalue\n\n\n    \nenc_path\n \n=\n \nencode\n(\npath\n)\n\n\n    \nif\n \nos\n.\npath\n.\nexists\n(\nenc_path\n):\n\n        \nif\n \nfirst\n:\n\n            \ntry\n:\n\n                \nsys\n.\npath\n.\nremove\n(\nenc_path\n)\n\n            \nexcept\n \n(\nValueError\n):\n\n                \npass\n\n            \nsys\n.\npath\n.\ninsert\n(\n0\n,\n \nenc_path\n)\n\n        \nelif\n \nenc_path\n \nnot\n \nin\n \nsys\n.\npath\n:\n\n            \nsys\n.\npath\n.\nappend\n(\nenc_path\n)\n\n\n\n\ndef\n \nremove\n(\npath\n):\n\n    \n\n\n    Removes a path from sys.path if it is present\n\n\n\n    :param path:\n\n\n        A unicode string of a folder, zip file or sublime-package file\n\n\n    \n\n\n    \ntry\n:\n\n        \nsys\n.\npath\n.\nremove\n(\nencode\n(\npath\n))\n\n    \nexcept\n \n(\nValueError\n):\n\n        \npass\n\n\n    \nif\n \nos\n.\nname\n \n==\n \nnt\n:\n\n        \nbuf\n \n=\n \ncreate_unicode_buffer\n(\n512\n)\n\n        \nif\n \nwindll\n.\nkernel32\n.\nGetShortPathNameW\n(\npath\n,\n \nbuf\n,\n \nlen\n(\nbuf\n)):\n\n            \npath\n \n=\n \nbuf\n.\nvalue\n\n        \ntry\n:\n\n            \nsys\n.\npath\n.\nremove\n(\nencode\n(\npath\n))\n\n        \nexcept\n \n(\nValueError\n):\n\n            \npass\n\n\n\n\ndef\n \ngenerate_dependency_paths\n(\nname\n):\n\n    \n\n\n    Accepts a dependency name and generates a dict containing the three standard\n\n\n    import paths that are valid for the current machine.\n\n\n\n    :param name:\n\n\n        A unicode string name of the dependency\n\n\n\n    :return:\n\n\n        A dict with the following keys:\n\n\n         - \nver\n\n\n         - \nplat\n\n\n         - \narch\n\n\n    \n\n\n    \npackages_dir\n \n=\n \nos\n.\npath\n.\njoin\n(\nst_dir\n,\n \nu\nPackages\n)\n\n    \ndependency_dir\n \n=\n \nos\n.\npath\n.\njoin\n(\npackages_dir\n,\n \nname\n)\n\n\n    \nver\n \n=\n \nu\nst\n%s\n \n%\n \nst_version\n\n    \nplat\n \n=\n \nsublime\n.\nplatform\n()\n\n    \narch\n \n=\n \nsublime\n.\narch\n()\n\n\n    \nreturn\n \n{\n\n        \nall\n:\n \nos\n.\npath\n.\njoin\n(\ndependency_dir\n,\n \nall\n),\n\n        \nver\n:\n \nos\n.\npath\n.\njoin\n(\ndependency_dir\n,\n \nver\n),\n\n        \nplat\n:\n \nos\n.\npath\n.\njoin\n(\ndependency_dir\n,\n \nu\n%s\n_\n%s\n \n%\n \n(\nver\n,\n \nplat\n)),\n\n        \narch\n:\n \nos\n.\npath\n.\njoin\n(\ndependency_dir\n,\n \nu\n%s\n_\n%s\n_\n%s\n \n%\n \n(\nver\n,\n \nplat\n,\n \narch\n))\n\n    \n}\n\n\n\n\ndef\n \nadd_dependency\n(\nname\n,\n \nfirst\n=\nFalse\n):\n\n    \n\n\n    Accepts a dependency name and automatically adds the appropriate path\n\n\n    to sys.path, if the dependency has a path for the current platform and\n\n\n    architecture.\n\n\n\n    :param name:\n\n\n        A unicode string name of the dependency\n\n\n\n    :param first:\n\n\n        If the path should be added to the beginning of the list\n\n\n    \n\n\n    \ndep_paths\n \n=\n \ngenerate_dependency_paths\n(\nname\n)\n\n\n    \nfor\n \npath\n \nin\n \ndep_paths\n.\nvalues\n():\n\n        \nif\n \nos\n.\npath\n.\nexists\n(\nencode\n(\npath\n)):\n\n            \nadd\n(\npath\n,\n \nfirst\n=\nfirst\n)\n\n\n\n\nadd_dependency\n(\npygments\n)\n\n\nadd_dependency\n(\nmarkupsafe\n)\n\n\nadd_dependency\n(\npython-markdown\n)\n\n\nadd_dependency\n(\npython-jinja2\n)\n\n\nadd_dependency\n(\nmdpopups\n)\n\n\n\n\n\n\n\n\n\n\nRestart and enjoy.\n\n\n\n\n\n\nGit Cloning\n\ue157\n\n\n\n\n\n\nQuit Sublime Text.\n\n\n\n\n\n\nOpen a terminal and enter the following.  For dependencies replace the URL with the appropriate URL, and the appropriate folder to check it out to:\n\n\ncd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/ColorHelper.git ColorHelper\n\n\n\n\n\n\n\n\n\nRestart Sublime Text.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#package-control", 
            "text": "The recommended way to install ColorHelper is via  Package Control .  Package Control will install the correct branch on your system and keep it up to date.     Ensure Package Control is installed.  Instructions are found  here .    In Sublime Text, press  ctrl  +  shift  +  p  (Win, Linux) or  cmd  +  shift  +  p  (Mac OS) to bring up the quick panel and start typing  Package Control: Install Package .  Select the command and it will show a list of installable plugins.    Start typing  ColorHelper ; when you see it, select it.    Restart to be sure everything is loaded proper.    Enjoy!", 
            "title": "Package Control"
        }, 
        {
            "location": "/installation/#manual-installation", 
            "text": "Warning  This is not the recommended way to install ColorHelper for the average user.  Installing this way  will not  get automatically updated.  If you are forking for a pull request, you should  just  clone ColorHelper and run Package Control's  Satisfy Dependency  command to get all the dependencies.   For those who want to install ColorHelper without package control, here are the steps.  It understood that some people for what ever reason will prefer manually and may even have legitimate reasons to do so.  When going this route, you will have to keep all the packages updated yourself.     Download the latest releases of the following dependencies and unpack or git clone in the  Packages  folder as shown below:   https://bitbucket.org/teddy_beer_maniac/sublime-text-dependency-markupsafe  -   markupsafe  https://bitbucket.org/teddy_beer_maniac/sublime-text-dependency-jinja2  -   python-jinja2  https://github.com/packagecontrol/pygments  -   pygments  https://github.com/facelessuser/sublime-markdown-popups  -   mdpopups  https://github.com/facelessuser/sublime-markdown  -   python-markdown     Download and unpack or git clone the latest ColorHelper release and unpack as  ColorHelper :   https://github.com/facelessuser/ColorHelper  -  ColorHelper     Create a folder under  Packages  called  00-dependencies  and under that folder create a file called  00-dependencies.py :  Copy the following code to  00-dependencies.py  (this code was taken from Package Control):  import   sys  import   os  from   os.path   import   dirname  if   os . name   ==   nt : \n     from   ctypes   import   windll ,   create_unicode_buffer  import   sublime  if   sys . version_info   =   ( 3 ,): \n     def   decode ( path ): \n         return   path \n\n     def   encode ( path ): \n         return   path \n\n     if   os . path . basename ( __file__ )   ==   sys_path.py : \n         pc_package_path   =   dirname ( dirname ( __file__ )) \n     # When loaded as a .sublime-package file, the filename ends up being \n     # Package Control.sublime-package/Package Control.package_control.sys_path \n     else : \n         pc_package_path   =   dirname ( __file__ ) \n     st_version   =   u 3  else : \n     def   decode ( path ): \n         if   not   isinstance ( path ,   unicode ): \n             path   =   path . decode ( sys . getfilesystemencoding ()) \n         return   path \n\n     def   encode ( path ): \n         if   isinstance ( path ,   unicode ): \n             path   =   path . encode ( sys . getfilesystemencoding ()) \n         return   path \n\n     pc_package_path   =   decode ( os . getcwd ()) \n     st_version   =   u 2  st_dir   =   dirname ( dirname ( pc_package_path ))  def   add ( path ,   first = False ): \n          Adds an entry to the beginning of sys.path, working around the fact that      Python 2.6 can t import from non-ASCII paths on Windows.      :param path:          A unicode string of a folder, zip file or sublime-package file to          add to the path      :param first:          If the path should be added at the beginning       \n\n     if   os . name   ==   nt : \n         # Work around unicode path import issue on Windows with Python 2.6 \n         buf   =   create_unicode_buffer ( 512 ) \n         if   windll . kernel32 . GetShortPathNameW ( path ,   buf ,   len ( buf )): \n             path   =   buf . value \n\n     enc_path   =   encode ( path ) \n\n     if   os . path . exists ( enc_path ): \n         if   first : \n             try : \n                 sys . path . remove ( enc_path ) \n             except   ( ValueError ): \n                 pass \n             sys . path . insert ( 0 ,   enc_path ) \n         elif   enc_path   not   in   sys . path : \n             sys . path . append ( enc_path )  def   remove ( path ): \n          Removes a path from sys.path if it is present      :param path:          A unicode string of a folder, zip file or sublime-package file       \n\n     try : \n         sys . path . remove ( encode ( path )) \n     except   ( ValueError ): \n         pass \n\n     if   os . name   ==   nt : \n         buf   =   create_unicode_buffer ( 512 ) \n         if   windll . kernel32 . GetShortPathNameW ( path ,   buf ,   len ( buf )): \n             path   =   buf . value \n         try : \n             sys . path . remove ( encode ( path )) \n         except   ( ValueError ): \n             pass  def   generate_dependency_paths ( name ): \n          Accepts a dependency name and generates a dict containing the three standard      import paths that are valid for the current machine.      :param name:          A unicode string name of the dependency      :return:          A dict with the following keys:           -  ver           -  plat           -  arch       \n\n     packages_dir   =   os . path . join ( st_dir ,   u Packages ) \n     dependency_dir   =   os . path . join ( packages_dir ,   name ) \n\n     ver   =   u st %s   %   st_version \n     plat   =   sublime . platform () \n     arch   =   sublime . arch () \n\n     return   { \n         all :   os . path . join ( dependency_dir ,   all ), \n         ver :   os . path . join ( dependency_dir ,   ver ), \n         plat :   os . path . join ( dependency_dir ,   u %s _ %s   %   ( ver ,   plat )), \n         arch :   os . path . join ( dependency_dir ,   u %s _ %s _ %s   %   ( ver ,   plat ,   arch )) \n     }  def   add_dependency ( name ,   first = False ): \n          Accepts a dependency name and automatically adds the appropriate path      to sys.path, if the dependency has a path for the current platform and      architecture.      :param name:          A unicode string name of the dependency      :param first:          If the path should be added to the beginning of the list       \n\n     dep_paths   =   generate_dependency_paths ( name ) \n\n     for   path   in   dep_paths . values (): \n         if   os . path . exists ( encode ( path )): \n             add ( path ,   first = first )  add_dependency ( pygments )  add_dependency ( markupsafe )  add_dependency ( python-markdown )  add_dependency ( python-jinja2 )  add_dependency ( mdpopups )     Restart and enjoy.", 
            "title": "Manual Installation"
        }, 
        {
            "location": "/installation/#git-cloning", 
            "text": "Quit Sublime Text.    Open a terminal and enter the following.  For dependencies replace the URL with the appropriate URL, and the appropriate folder to check it out to:  cd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/ColorHelper.git ColorHelper    Restart Sublime Text.", 
            "title": "Git Cloning"
        }, 
        {
            "location": "/usage/", 
            "text": "General Usage\n\ue157\n\n\nColorHelper is a CSS/SCSS/Sass tooltip.  When the cursor is on a CSS color, the tooltip will appear. When entering a color into a supported file, the color palette panel will be triggered so you can optionally insert a color from a saved palette.  The panel will popup after either: \n#\n, \nrgb(\n, \nrgba(\n, \nhsl(\n or \nhsla(\n.\n\n\n\n\nNote\n\n\nPopups are provided by the \nmdpopups\n dependency.\n\n\n\n\nColor Info\n\ue157\n\n\nThe Color Info Panel will show a preview of the color, and other format variations of the color such as: color name, \nhex\n, \nrgb\n, \nrgba\n, \nhsl\n, and \nhsla\n format; if desired, you can convert the selected color to one of the shown formats by clicking the link to the left.\n\n\n\n\nFrom the color info panel, you can launch a color picker, bookmark colors as a favorite, add/save the current color to a palette of your choice, or open the \nPalette Panel\n to select a pre-saved color from an existing palette.\n\n\nColor Picker\n\ue157\n\n\nThe internal color picker can be launched from the view's context menu, the command palette, or from the \nColor Info Panel\n.  When launched it will use the color under the cursor (if available) as its starting color. The internal color picker is contained inside a tooltip.  It has a color map section at the top where different colors can be selected. It shows various valid CSS formats of the colors at the bottom.  And it shows either \nrgba\n channels or \nhlsa\n channels; a toggle is available to switch between them.\n\n\n\n\nThe color channels are coarse, but can generally allow you to get close to a color that you like.  As you select colors in the channel the selections will shift revealing more selections until the bounds of the color channel are reached.  If you need finer selections, you can click the label to the left and scrollable tooltip with much finer selections will appear so that you can select the best suited value.\n\n\n\n\nIf you would like to pick from a list of CSS color names, you can select the \nCSS color names\n link and a CSS Color Names panel will open:\n\n\n\n\nIf you would like to directly enter a different color, you can select the \nenter new color\n option.  An input panel will be open that can receive a color in the hex form of \n#RRGGBBAA\n where \nRR\n is the red channel, \nGG\n is the green channel, \nBB\n is the blue channel, and \nAA\n is the alpha channel.\n\n\nTo select a color, just click the \n link to the right of the CSS format you want.\n\n\nAdd Color Panel\n\ue157\n\n\nThe Add Color Panel presents the user with the option of either adding a color to an existing palette or creating a new global or project palette and adding the color to it.\n\n\n\n\nWhen creating a new palette, the user will be presented with a input box to type the name of the palette to create.\n\n\nPalette Panel\n\ue157\n\n\nThe Palette panel will allow you to view the current saved palettes: favorites, saved user palette, and saved project palettes.\n\n\n\n\nThe Favorites palette and user palettes are found in your \nPackages/User/color_helper.palettes\n.  Project palettes are stored in your actual project file; if one does not exist, it will be stored in memory.\n\n\nBy clicking a palette, you will be taken to the \nColor Panel\n to select a color to insert into the current document.  You can also access the \nPalette Delete Panel\n directly.\n\n\nPalette Delete Panel\n\ue157\n\n\nThe Palette Delete Panel allows a user to delete an existing palette.  The only palettes that cannot be deleted is the Favorites palette and the Current Colors palette (if enabled).\n\n\n\n\nTo delete a palette, a user simply clicks a palette and it will be removed.\n\n\nColor Panel\n\ue157\n\n\nThe Color Panel allows you to click a color to insert it at your current color position.\n\n\n\n\nYou can also bring up the \nColor Delete Panel\n from the view's context menu or the command palette.\n\n\nColor Delete Panel\n\ue157\n\n\nThe Color Delete Panel can delete any color from the given palette.  A user simply clicks the color to remove, and it will be removed.\n\n\n\n\nSettings\n\ue157\n\n\nSettings for Color Helper are contained within the \ncolor_helper.sublime-settings\n file.\n\n\nauto_popup\n\ue157\n\n\nEnable/disable auto popups.\n\n\n    \n// Show popups automatically in configured files.\n\n    \nauto_popup\n:\n \ntrue\n,\n\n\n\n\n\n\ninline_previews\n\ue157\n\n\nEnable/disable inline color previews. \ninline_previews\n generates an image previews after the identified color in your source file.  You can click the preview to bring up the ColorHelper panel.\n\n\n\n\ninline_preview_offset\n\ue157\n\n\nColorHelper does it best to calculate the correct size for inline images, but with some font's or screen resolutions (or for a reason I don't quite understand) it will get it wrong and create an image larger (or maybe smaller) than your line height which may cause an undesirable look.  Set this value to either a positive or negative value which will be applied to the inline preview's image size.\n\n\n    \n// Adjust the size of inline image previews by the offset given.\n\n    \n// Please use either a positive or negative number.\n\n    \ninline_preview_offset\n:\n \n0\n,\n\n\n\n\n\n\nIf you need to set this per OS or per host, you can via \nmulticonf\n.\n\n\ninline_preview_position\n\ue157\n\n\nPreviews can be positioned to the left or right of a color. Set this value to \"left\" or \"right to toggle its behavior.\n\n\n    \n// Adjust the position of inline image previews.\n\n    \n// (left|right)\n\n    \ninline_preview_position\n:\n \nleft\n,\n\n\n\n\n\n\nupper_case_hex\n\ue157\n\n\nWhen inserting a color from the tooltip, this setting will determine if hex colors get uppercased or lowercased.\n\n\n    \n// Upper case hex when inserting\n\n    \nupper_case_hex\n:\n \nfalse\n,\n\n\n\n\n\n\nuse_webcolor_names\n\ue157\n\n\nWill determine if a HTML color name will be shown for the currently selected colors. If inserting a web color name, transparency will be removed.\n\n\n    \n// Use webcolor names when value color matches a webcolor name.\n\n    \nuse_webcolor_names\n:\n \ntrue\n,\n\n\n\n\n\n\nclick_color_box_to_pick\n\ue157\n\n\nThis will make the color preview box in the \nColor Info Panel\n clickable.  When set to \ncolor_picker\n and clicked, it will open the color picker via the \nColorPicker\n plugin (if installed).  When set to \npalette_picker\n and clicked, it will open the \nPalette Panel\n. The respective menu item will not be shown in the \nColor Info Panel\n once relocated to the color preview.\n\n\n    \n// Color picker and palette picker by default\n\n    \n// are accessed by clicking an icon on the color info panel.\n\n    \n// Click access for one of thesecan be moved to the color box\n\n    \n// (visual representation of the color).\n\n    \n// (none|color_picker|palette_picker)\n\n    \nclick_color_box_to_pick\n:\n \nnone\n,\n\n\n\n\n\n\ngraphic_size\n\ue157\n\n\nControls the size of generated graphics.  Graphics in the tooltips look best large as Sublime slightly distorts images, but on small screens, some of the tooltips (especially the internal color picker) may be too large.  \ngraphic_size\n can be used to control the size of these generated images.  Valid settings are \nsmall\n, \nmedium\n, and \nlarge\n where \nmedium\n is the default.\n\n\n    \n// If the color picker is too big, try playing with this.\n\n    \n// Graphics in tooltips usually look better bigger (especially in HiDPI),\n\n    \n// but that can make the tooltips really big. If they are too big,\n\n    \n// you can play with this setting.  We compromise with medium.\n\n    \n// (small | medium | large)\n\n    \ngraphic_size\n:\n \nmedium\n,\n\n\n\n\n\n\nIf you need to set this per OS or per host, you can via \nmulticonf\n.\n\n\nenable_color_picker\n\ue157\n\n\nEnables the ability to launch the color picker from the tooltip.  By default, the internal color picker will be used.  If you have \n@weslly\n's \nColorPicker\n package installed, you can use \nuse_color_picker_package\n to use it instead of the internal color picker.\n\n\n    \n// Enable color picker option.  Will use native color picker\n\n    \n// unless \nuse_color_picker_package\n is enabled and external\n\n    \n// package is installed.\n\n    \nenable_color_picker\n:\n \ntrue\n,\n\n\n\n\n\n\nuse_hex_color_picker\n\ue157\n\n\nEnables or disables the use of the hex color picker.  When enabled, the color picker has a hex shape as the colors fan out from the white center.  If disabled, the color picker will be a rectangular one that shows the colors by hue and by brightness.\n\n\n    \n// This can be turned off to get a rectangular color picker\n\n    \n// That displays possible options by hue and brightness/luminance.\n\n    \nuse_hex_color_picker\n:\n \ntrue\n,\n\n\n\n\n\n\n\n\nDisabled look\n\n\n\n\n\n\nuse_color_picker_package\n\ue157\n\n\nIf you have \n@weslly\n's [ColorPicker][color-picker] package installed, \nuser_color_picker_package\n will cause it to override the default color picker, but only the default color picker supports transparency.\n\n\n    \n// Use https://github.com/weslly/ColorPicker for the color picker if installed.\n\n    \nuse_color_picker_package\n:\n \nfalse\n,\n\n\n\n\n\n\nenable_global_user_palettes\n\ue157\n\n\nEnables showing user palettes (found in \nPackages/User/color_helper.palettes\n) in the \nPalette Panel\n.\n\n\n    \n// Show global palettes in palette panel\n\n    \nenable_global_user_palettes\n:\n \ntrue\n,\n\n\n\n\n\n\nenable_favorite_palette\n\ue157\n\n\nEnables showing the Favorites palette (found in \nPackages/User/color_helper.palettes\n) in the \nPalette Panel\n.\n\n\n    \n// Enable storing favorite colors to the favorite palette\n\n    \nenable_favorite_palette\n:\n \ntrue\n,\n\n\n\n\n\n\nenable_current_file_palette\n\ue157\n\n\nEnables scanning of the current active view buffer for colors and showing them in the Current Colors palette in the \nPalette Panel\n.\n\n\n    \n// Enable showing current file color palette\n\n    \nenable_current_file_palette\n:\n \ntrue\n,\n\n\n\n\n\n\nenable_project_user_palettes\n\ue157\n\n\nEnables showing and storing of user palettes in the project file.  Project palettes will be shown in the \nPalette Panel\n.\n\n\n    \n// Enable project palettes in palette panel (Palettes stored in project file).\n\n    \nenable_project_user_palettes\n:\n \ntrue\n\n\n\n\n\n\nenable_color_conversions\n\ue157\n\n\nEnables showing the color conversion options on the \nColor Info Panel\n.\n\n\n    \n// Enable color conversion options on color info panel\n\n    \nenable_color_conversions\n:\n \ntrue\n,\n\n\n\n\n\n\nshow_index_status\n\ue157\n\n\nSet whether indexing status is shown in the status bar.\n\n\n    \n// Show index status in the status bar.\n\n    \nshow_index_status\n:\n \ntrue\n,\n\n\n\n\n\n\nline_height_workaround\n\ue157\n\n\nTemporary workaround for Windows 10 HiDPI setups that reduces image sizes.\n\n\n    \n// For Windows 10 HiDPI setups.  This is a temporary workaround\n\n    \n// to help reduce abnormally large color previews and other images.\n\n    \n// This will be removed once the issue is fixed in Sublime Text 3.\n\n    \nline_height_workaround\n:\n \nfalse\n,\n\n\n\n\n\n\ncolor_scanning\n\ue157\n\n\nSetting to control color scanning which is responsible for both auto-popups and constructing \"Current File Palette\".\n\n\ncolor_scanning\n is an array of rules.  Each rule can target file(s) and enable certain scanning certain scopes for specific colors.  Each rule is a dictionary.  \nsyntax_files\n, \nbase_scopes\n, and \nextensions\n or used to target the a file for scanning; you can use a specific one, or multiple.\n\n\n    \ncolor_scanning\n:\n \n[\n\n        \n{\n\n            \nsyntax_files\n:\n \n[],\n\n            \nsyntax_filter\n:\n \nwhitelist\n,\n\n            \nbase_scopes\n:\n \n[\n\n                \nsource.css\n,\n\n                \ntext.html\n\n            \n],\n\n            \nscan_scopes\n:\n \n[\n\n                \n// CSS, CSS in HTML etc. (based on: Sublime Default)\n\n                \nmeta.property-value.css -comment -string\n,\n\n                \n// CSS3, CSS3 in HTML etc. (based on: https://packagecontrol.io/packages/CSS3)\n\n                \nmeta.value.css -comment -string\n,\n\n                \n// HTML attributes (based on: Sublime Default)\n\n                \nmeta.tag.inline.any.html string.quoted\n,\n\n                \nmeta.tag.any.html meta.attribute-with-value.style.html\n\n            \n],\n\n            \nscan_completion_scopes\n:\n \n[],\n\n            \nextensions\n:\n \n[],\n\n            \nallowed_colors\n:\n \n[\ncss3\n],\n\n            \nuse_hex_argb\n:\n \nfalse\n,\n\n            \ncompress_hex_output\n:\n \ntrue\n\n        \n},\n\n    \n]\n\n\n\n\n\n\ncolor_scanning.syntax_files\n\ue157\n\n\nsyntax_files\n is an array of syntax file (\ntmLanguage\n or \nsublime-syntax\n)names and are relative to \nPackages\n (extensions should be excluded).  They are used to filter views that will be targeted for scanning. Depending on how \nsyntax_filter\n is set, \nsyntax_files\n will either require the files to be in the list or not in the list.  If \nsyntax_files\n is set as an empty array, all views will be targeted unless filtered further by other settings.\n\n\nAssuming that you have a \ntmLanguage\n file \nPackages/CSS/CSS.tmLanguage\n:\n\n\n    \ncolor_scanning\n:\n \n[\n\n        \n{\n\n            \nsyntax_files\n:\n \n[\nCSS/CSS\n],\n\n\n\n\n\n\ncolor_scanning.syntax_filter\n\ue157\n\n\nsyntax_filter\n will cause \nsyntax_files\n to be treated as either a \nblacklist\n or \nwhitelist\n.  Acceptable values are \nblacklist\n and \nwhitelist\n.  \nwhitelist\n is the default setting.\n\n\n    \ncolor_scanning\n:\n \n[\n\n        \n{\n\n            \nsyntax_filter\n:\n \nwhitelist\n,\n\n\n\n\n\n\ncolor_scanning.base_scopes\n\ue157\n\n\nbase_scopes\n is used to target specific file views that are syntax highlighted with a specific base scope.  This allows you to target multiple syntax highlighters that all use the same base scope.  \nbase_scopes\n is an array; if the array is left empty, all views will be targeted unless filtered further by other settings.\n\n\n    \ncolor_scanning\n:\n \n[\n\n        \n{\n\n            \nbase_scopes\n:\n \n[\nsource.css\n],\n\n\n\n\n\n\ncolor_scanning.extensions\n\ue157\n\n\nextensions\n is used to target specific file views that a file name with the specified extension(s).  \nextensions\n is an array; if the array is left empty, all views will be targeted unless filtered further by other settings.  For this setting to work the file usually must exist on disk as views that do not exist on text usually do not have a file name.\n\n\n    \ncolor_scanning\n:\n \n[\n\n        \n{\n\n            \nextensions\n:\n \n[\n.css\n],\n\n\n\n\n\n\ncolor_scanning.scan_scopes\n\ue157\n\n\nscan_scopes\n is an array of scopes that will be searched for colors.  Scopes in this array contain usually \ntmTheme\n scope syntax, so you can include scopes or exclude scopes etc.\n\n\nIn the example below, we target \nmeta.property-value.css\n, but only if it is not also scoped as a \nstring\n or a \ncomment\n.\n\n\n    \ncolor_scanning\n:\n \n[\n\n        \n{\n\n            \nscan_scopes\n:\n \n[\nmeta.property-value.css -comment -string\n]\n\n\n\n\n\n\ncolor_scanning.scan_completion_scopes\n\ue157\n\n\nscan_completion_scopes\n is an array of scopes that will be searched for certain syntax for color completions.  This is used only if \nscan_scopes\n is not sufficient to also capture colors that need to be completed.  For example: sometimes \nscan_scopes\n is not broad enough to capture incomplete colors, but we don't want to generally want to scan so broadly when scanning an entire file for complete colors.  Scopes in this array contain usually \ntmTheme\n scope syntax, so you can include scopes or exclude scopes etc.\n\n\nIn the example below, we target \nsource.scss\n and \nsource.sass\n, but only if they are not also scoped as \nstring\n or \ncomment\n.\n\n\n    \ncolor_scanning\n:\n \n[\n\n        \n{\n\n            \nscan_completion_scopes\n:\n \n[\n\n                \nsource.scss -comment -string\n,\n\n                \nsource.sass -comment -string\n\n            \n],\n\n\n\n\n\n\ncolor_scanning.allowed_colors\n\ue157\n\n\nallowed_colors\n defines which colors will be scanned for in a specific file.  It is an array of strings where each strings specifies a color type or category of colors to scan for.\n\n\n\n\n\n\n\n\nValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nwebcolors\n\n\nCSS3 color names plus CSS4's \nrebeccapurple\n.\n\n\n\n\n\n\nhex\n\n\nHex colors in the form of \n#RRGGBB\n.\n\n\n\n\n\n\nhex_compressed\n\n\nHex colors in the form of \n#RGB\n.\n\n\n\n\n\n\nhexa\n\n\nHex colors with an alpha channel in the form \n#RRGGBBAA\n or \n#AARRGGBB\n if \nuse_hex_argb\n is set to \ntrue\n.\n\n\n\n\n\n\nhexa_compressed\n\n\nHex colors with an alpha channel in the form \n#RGBA\n or \n#ARGB\n if \nuse_hex_argb\n is set to \ntrue\n.\n\n\n\n\n\n\nrgb\n\n\nRGB\n colors in the form \nrgb(255, 128, 0)\n or \nrgb(100%, 50%, 0%)\n.\n\n\n\n\n\n\nrgba\n\n\nRGBA\n colors in the form \nrgb(255, 128, 0, .5)\n or \nrgb(100%, 50%, 0%, .5)\n. It also supports CSS4's alpha as a percentage format: \nrgb(100%, 50%, 0%, 50%)\n.\n\n\n\n\n\n\nhsl\n\n\nHSL\n colors in the form \nhsl(360, 100%, 50%)\n.\n\n\n\n\n\n\nhsla\n\n\nHSLA\n colors in the form \nhsla(360, 100%, 50%, .5)\n. It also supports CSS4's alpha as a percentage format: \nhsla(360, 100%, 50%, 50%)\n.\n\n\n\n\n\n\ngray\n\n\nCSS4's gray format: \ngray(255)\n or \ngray(100%)\n.\n\n\n\n\n\n\ngraya\n\n\nCSS4's gray with alpha format: \ngray(255, .5)\n or \ngray(100%, .5)\n.  It also supports alpha as a percentage format: \ngray(100%, 50%)\n.\n\n\n\n\n\n\nhwb\n\n\nCSS4's \nHWB\n color format: \nhwb(360, 50%, 100%)\n.\n\n\n\n\n\n\nhwba\n\n\nCSS4's \nHWBA\n color format: \nhwb(360, 50%, 100%, 5)\n or \nhwb(360, 50%, 100%, 50%)\n.\n\n\n\n\n\n\ncss3\n\n\nAll CSS3 formats: \nwebcolors\n, \nhex\n, \nhex_compressed\n, \nrgb\n, \nrgba\n, \nhsl\n, \nhsla\n.\n\n\n\n\n\n\ncss4\n\n\nAll CSS4 formats: \ncss3\n, \ngray\n, \ngraya\n, \nhwb\n, \nhwba\n, \nhexa\n, \nhexa_compressed\n.\n\n\n\n\n\n\nall\n\n\nAll color formats.\n\n\n\n\n\n\n\n\n    \ncolor_scanning\n:\n \n[\n\n        \n{\n\n            \nallowed_colors\n:\n \n[\ncss3\n]\n\n\n\n\n\n\ncolor_scanning.use_hex_argb\n\ue157\n\n\nWhen scanning and processing hex \nrgb\n colors with alpha channels, process them as and output them with the alpha channel first opposed to at the end.  By default the value is \nfalse\n.\n\n\n    \ncolor_scanning\n:\n \n[\n\n        \n{\n\n            \nuse_hex_argb\n:\n \ntrue\n\n\n\n\n\n\ncolor_scanning.compress_hex_output\n\ue157\n\n\nWhen outputting hex formats compress the color if possible \n#334455\n \n \n#345\n.  The default is \nfalse\n.\n\n\n    \ncolor_scanning\n:\n \n[\n\n        \n{\n\n            \ncompress_hex_output\n:\n \ntrue\n\n\n\n\n\n\nMulticonf\n\ue157\n\n\nCertain settings that lend them self better to be setting up per OS or per host will be configured to use \nmulticonf\n.  \nmulticonf\n is a library that will parse a setting as a normal setting or a per OS and/or per host setting (if configured properly).  For the settings that have this enabled, you can optionally use the format below to specify the setting per OS or per host.\n\n\nThe optional \nmulticonf\n format requires a dictionary with a special identifier\n\n#multiconf#\n  and a list of dictionaries identified by a qualifier of the form\n\n\n    \nqualifier name\n:\nqualifier value\n[;\nqualifier name\n:\nqualifier value\n]...\n\n\n\n\n\n\nFor example, the following setting\n\n\n    \nuser_home\n:\n \n/home\n\n\n\n\n\n\nwould result in \nget(\nuser_home\n)\n returning the value \"/home\" but it could also\nbe replaced with\n\n\n    \nuser_home\n:\n  \n{\n\n                    \n#multiconf#\n:\n \n[\n\n                        \n{\nos:windows\n:\n \nC:\\\\Users\n},\n\n                        \n{\nos:linux;host:his_pc\n:\n \n/home\n},\n\n                        \n{\nos:linux;host:her_pc\n:\n \n/home/her/special\n}\n\n                    \n]\n\n    \n}\n\n\n\n\n\n\nNow the same configuration file will provide different values depending on the\nmachine it's on. On an MS Windows machine the value returned by \nget\n will be\n\"C:\\Users\", and on a Linux machine with the host name \nhis_pc\n the value will be\n\"/home\", etc.", 
            "title": "User Guide"
        }, 
        {
            "location": "/usage/#general-usage", 
            "text": "ColorHelper is a CSS/SCSS/Sass tooltip.  When the cursor is on a CSS color, the tooltip will appear. When entering a color into a supported file, the color palette panel will be triggered so you can optionally insert a color from a saved palette.  The panel will popup after either:  # ,  rgb( ,  rgba( ,  hsl(  or  hsla( .   Note  Popups are provided by the  mdpopups  dependency.", 
            "title": "General Usage"
        }, 
        {
            "location": "/usage/#color-info", 
            "text": "The Color Info Panel will show a preview of the color, and other format variations of the color such as: color name,  hex ,  rgb ,  rgba ,  hsl , and  hsla  format; if desired, you can convert the selected color to one of the shown formats by clicking the link to the left.   From the color info panel, you can launch a color picker, bookmark colors as a favorite, add/save the current color to a palette of your choice, or open the  Palette Panel  to select a pre-saved color from an existing palette.", 
            "title": "Color Info"
        }, 
        {
            "location": "/usage/#color-picker", 
            "text": "The internal color picker can be launched from the view's context menu, the command palette, or from the  Color Info Panel .  When launched it will use the color under the cursor (if available) as its starting color. The internal color picker is contained inside a tooltip.  It has a color map section at the top where different colors can be selected. It shows various valid CSS formats of the colors at the bottom.  And it shows either  rgba  channels or  hlsa  channels; a toggle is available to switch between them.   The color channels are coarse, but can generally allow you to get close to a color that you like.  As you select colors in the channel the selections will shift revealing more selections until the bounds of the color channel are reached.  If you need finer selections, you can click the label to the left and scrollable tooltip with much finer selections will appear so that you can select the best suited value.   If you would like to pick from a list of CSS color names, you can select the  CSS color names  link and a CSS Color Names panel will open:   If you would like to directly enter a different color, you can select the  enter new color  option.  An input panel will be open that can receive a color in the hex form of  #RRGGBBAA  where  RR  is the red channel,  GG  is the green channel,  BB  is the blue channel, and  AA  is the alpha channel.  To select a color, just click the   link to the right of the CSS format you want.", 
            "title": "Color Picker"
        }, 
        {
            "location": "/usage/#add-color-panel", 
            "text": "The Add Color Panel presents the user with the option of either adding a color to an existing palette or creating a new global or project palette and adding the color to it.   When creating a new palette, the user will be presented with a input box to type the name of the palette to create.", 
            "title": "Add Color Panel"
        }, 
        {
            "location": "/usage/#palette-panel", 
            "text": "The Palette panel will allow you to view the current saved palettes: favorites, saved user palette, and saved project palettes.   The Favorites palette and user palettes are found in your  Packages/User/color_helper.palettes .  Project palettes are stored in your actual project file; if one does not exist, it will be stored in memory.  By clicking a palette, you will be taken to the  Color Panel  to select a color to insert into the current document.  You can also access the  Palette Delete Panel  directly.", 
            "title": "Palette Panel"
        }, 
        {
            "location": "/usage/#palette-delete-panel", 
            "text": "The Palette Delete Panel allows a user to delete an existing palette.  The only palettes that cannot be deleted is the Favorites palette and the Current Colors palette (if enabled).   To delete a palette, a user simply clicks a palette and it will be removed.", 
            "title": "Palette Delete Panel"
        }, 
        {
            "location": "/usage/#color-panel", 
            "text": "The Color Panel allows you to click a color to insert it at your current color position.   You can also bring up the  Color Delete Panel  from the view's context menu or the command palette.", 
            "title": "Color Panel"
        }, 
        {
            "location": "/usage/#color-delete-panel", 
            "text": "The Color Delete Panel can delete any color from the given palette.  A user simply clicks the color to remove, and it will be removed.", 
            "title": "Color Delete Panel"
        }, 
        {
            "location": "/usage/#settings", 
            "text": "Settings for Color Helper are contained within the  color_helper.sublime-settings  file.", 
            "title": "Settings"
        }, 
        {
            "location": "/usage/#auto_popup", 
            "text": "Enable/disable auto popups.       // Show popups automatically in configured files. \n     auto_popup :   true ,", 
            "title": "auto_popup"
        }, 
        {
            "location": "/usage/#inline_previews", 
            "text": "Enable/disable inline color previews.  inline_previews  generates an image previews after the identified color in your source file.  You can click the preview to bring up the ColorHelper panel.", 
            "title": "inline_previews"
        }, 
        {
            "location": "/usage/#inline_preview_offset", 
            "text": "ColorHelper does it best to calculate the correct size for inline images, but with some font's or screen resolutions (or for a reason I don't quite understand) it will get it wrong and create an image larger (or maybe smaller) than your line height which may cause an undesirable look.  Set this value to either a positive or negative value which will be applied to the inline preview's image size.       // Adjust the size of inline image previews by the offset given. \n     // Please use either a positive or negative number. \n     inline_preview_offset :   0 ,   If you need to set this per OS or per host, you can via  multiconf .", 
            "title": "inline_preview_offset"
        }, 
        {
            "location": "/usage/#inline_preview_position", 
            "text": "Previews can be positioned to the left or right of a color. Set this value to \"left\" or \"right to toggle its behavior.       // Adjust the position of inline image previews. \n     // (left|right) \n     inline_preview_position :   left ,", 
            "title": "inline_preview_position"
        }, 
        {
            "location": "/usage/#upper_case_hex", 
            "text": "When inserting a color from the tooltip, this setting will determine if hex colors get uppercased or lowercased.       // Upper case hex when inserting \n     upper_case_hex :   false ,", 
            "title": "upper_case_hex"
        }, 
        {
            "location": "/usage/#use_webcolor_names", 
            "text": "Will determine if a HTML color name will be shown for the currently selected colors. If inserting a web color name, transparency will be removed.       // Use webcolor names when value color matches a webcolor name. \n     use_webcolor_names :   true ,", 
            "title": "use_webcolor_names"
        }, 
        {
            "location": "/usage/#click_color_box_to_pick", 
            "text": "This will make the color preview box in the  Color Info Panel  clickable.  When set to  color_picker  and clicked, it will open the color picker via the  ColorPicker  plugin (if installed).  When set to  palette_picker  and clicked, it will open the  Palette Panel . The respective menu item will not be shown in the  Color Info Panel  once relocated to the color preview.       // Color picker and palette picker by default \n     // are accessed by clicking an icon on the color info panel. \n     // Click access for one of thesecan be moved to the color box \n     // (visual representation of the color). \n     // (none|color_picker|palette_picker) \n     click_color_box_to_pick :   none ,", 
            "title": "click_color_box_to_pick"
        }, 
        {
            "location": "/usage/#graphic_size", 
            "text": "Controls the size of generated graphics.  Graphics in the tooltips look best large as Sublime slightly distorts images, but on small screens, some of the tooltips (especially the internal color picker) may be too large.   graphic_size  can be used to control the size of these generated images.  Valid settings are  small ,  medium , and  large  where  medium  is the default.       // If the color picker is too big, try playing with this. \n     // Graphics in tooltips usually look better bigger (especially in HiDPI), \n     // but that can make the tooltips really big. If they are too big, \n     // you can play with this setting.  We compromise with medium. \n     // (small | medium | large) \n     graphic_size :   medium ,   If you need to set this per OS or per host, you can via  multiconf .", 
            "title": "graphic_size"
        }, 
        {
            "location": "/usage/#enable_color_picker", 
            "text": "Enables the ability to launch the color picker from the tooltip.  By default, the internal color picker will be used.  If you have  @weslly 's  ColorPicker  package installed, you can use  use_color_picker_package  to use it instead of the internal color picker.       // Enable color picker option.  Will use native color picker \n     // unless  use_color_picker_package  is enabled and external \n     // package is installed. \n     enable_color_picker :   true ,", 
            "title": "enable_color_picker"
        }, 
        {
            "location": "/usage/#use_hex_color_picker", 
            "text": "Enables or disables the use of the hex color picker.  When enabled, the color picker has a hex shape as the colors fan out from the white center.  If disabled, the color picker will be a rectangular one that shows the colors by hue and by brightness.       // This can be turned off to get a rectangular color picker \n     // That displays possible options by hue and brightness/luminance. \n     use_hex_color_picker :   true ,    Disabled look", 
            "title": "use_hex_color_picker"
        }, 
        {
            "location": "/usage/#use_color_picker_package", 
            "text": "If you have  @weslly 's [ColorPicker][color-picker] package installed,  user_color_picker_package  will cause it to override the default color picker, but only the default color picker supports transparency.       // Use https://github.com/weslly/ColorPicker for the color picker if installed. \n     use_color_picker_package :   false ,", 
            "title": "use_color_picker_package"
        }, 
        {
            "location": "/usage/#enable_global_user_palettes", 
            "text": "Enables showing user palettes (found in  Packages/User/color_helper.palettes ) in the  Palette Panel .       // Show global palettes in palette panel \n     enable_global_user_palettes :   true ,", 
            "title": "enable_global_user_palettes"
        }, 
        {
            "location": "/usage/#enable_favorite_palette", 
            "text": "Enables showing the Favorites palette (found in  Packages/User/color_helper.palettes ) in the  Palette Panel .       // Enable storing favorite colors to the favorite palette \n     enable_favorite_palette :   true ,", 
            "title": "enable_favorite_palette"
        }, 
        {
            "location": "/usage/#enable_current_file_palette", 
            "text": "Enables scanning of the current active view buffer for colors and showing them in the Current Colors palette in the  Palette Panel .       // Enable showing current file color palette \n     enable_current_file_palette :   true ,", 
            "title": "enable_current_file_palette"
        }, 
        {
            "location": "/usage/#enable_project_user_palettes", 
            "text": "Enables showing and storing of user palettes in the project file.  Project palettes will be shown in the  Palette Panel .       // Enable project palettes in palette panel (Palettes stored in project file). \n     enable_project_user_palettes :   true", 
            "title": "enable_project_user_palettes"
        }, 
        {
            "location": "/usage/#enable_color_conversions", 
            "text": "Enables showing the color conversion options on the  Color Info Panel .       // Enable color conversion options on color info panel \n     enable_color_conversions :   true ,", 
            "title": "enable_color_conversions"
        }, 
        {
            "location": "/usage/#show_index_status", 
            "text": "Set whether indexing status is shown in the status bar.       // Show index status in the status bar. \n     show_index_status :   true ,", 
            "title": "show_index_status"
        }, 
        {
            "location": "/usage/#line_height_workaround", 
            "text": "Temporary workaround for Windows 10 HiDPI setups that reduces image sizes.       // For Windows 10 HiDPI setups.  This is a temporary workaround \n     // to help reduce abnormally large color previews and other images. \n     // This will be removed once the issue is fixed in Sublime Text 3. \n     line_height_workaround :   false ,", 
            "title": "line_height_workaround"
        }, 
        {
            "location": "/usage/#color_scanning", 
            "text": "Setting to control color scanning which is responsible for both auto-popups and constructing \"Current File Palette\".  color_scanning  is an array of rules.  Each rule can target file(s) and enable certain scanning certain scopes for specific colors.  Each rule is a dictionary.   syntax_files ,  base_scopes , and  extensions  or used to target the a file for scanning; you can use a specific one, or multiple.       color_scanning :   [ \n         { \n             syntax_files :   [], \n             syntax_filter :   whitelist , \n             base_scopes :   [ \n                 source.css , \n                 text.html \n             ], \n             scan_scopes :   [ \n                 // CSS, CSS in HTML etc. (based on: Sublime Default) \n                 meta.property-value.css -comment -string , \n                 // CSS3, CSS3 in HTML etc. (based on: https://packagecontrol.io/packages/CSS3) \n                 meta.value.css -comment -string , \n                 // HTML attributes (based on: Sublime Default) \n                 meta.tag.inline.any.html string.quoted , \n                 meta.tag.any.html meta.attribute-with-value.style.html \n             ], \n             scan_completion_scopes :   [], \n             extensions :   [], \n             allowed_colors :   [ css3 ], \n             use_hex_argb :   false , \n             compress_hex_output :   true \n         }, \n     ]", 
            "title": "color_scanning"
        }, 
        {
            "location": "/usage/#color_scanningsyntax_files", 
            "text": "syntax_files  is an array of syntax file ( tmLanguage  or  sublime-syntax )names and are relative to  Packages  (extensions should be excluded).  They are used to filter views that will be targeted for scanning. Depending on how  syntax_filter  is set,  syntax_files  will either require the files to be in the list or not in the list.  If  syntax_files  is set as an empty array, all views will be targeted unless filtered further by other settings.  Assuming that you have a  tmLanguage  file  Packages/CSS/CSS.tmLanguage :       color_scanning :   [ \n         { \n             syntax_files :   [ CSS/CSS ],", 
            "title": "color_scanning.syntax_files"
        }, 
        {
            "location": "/usage/#color_scanningsyntax_filter", 
            "text": "syntax_filter  will cause  syntax_files  to be treated as either a  blacklist  or  whitelist .  Acceptable values are  blacklist  and  whitelist .   whitelist  is the default setting.       color_scanning :   [ \n         { \n             syntax_filter :   whitelist ,", 
            "title": "color_scanning.syntax_filter"
        }, 
        {
            "location": "/usage/#color_scanningbase_scopes", 
            "text": "base_scopes  is used to target specific file views that are syntax highlighted with a specific base scope.  This allows you to target multiple syntax highlighters that all use the same base scope.   base_scopes  is an array; if the array is left empty, all views will be targeted unless filtered further by other settings.       color_scanning :   [ \n         { \n             base_scopes :   [ source.css ],", 
            "title": "color_scanning.base_scopes"
        }, 
        {
            "location": "/usage/#color_scanningextensions", 
            "text": "extensions  is used to target specific file views that a file name with the specified extension(s).   extensions  is an array; if the array is left empty, all views will be targeted unless filtered further by other settings.  For this setting to work the file usually must exist on disk as views that do not exist on text usually do not have a file name.       color_scanning :   [ \n         { \n             extensions :   [ .css ],", 
            "title": "color_scanning.extensions"
        }, 
        {
            "location": "/usage/#color_scanningscan_scopes", 
            "text": "scan_scopes  is an array of scopes that will be searched for colors.  Scopes in this array contain usually  tmTheme  scope syntax, so you can include scopes or exclude scopes etc.  In the example below, we target  meta.property-value.css , but only if it is not also scoped as a  string  or a  comment .       color_scanning :   [ \n         { \n             scan_scopes :   [ meta.property-value.css -comment -string ]", 
            "title": "color_scanning.scan_scopes"
        }, 
        {
            "location": "/usage/#color_scanningscan_completion_scopes", 
            "text": "scan_completion_scopes  is an array of scopes that will be searched for certain syntax for color completions.  This is used only if  scan_scopes  is not sufficient to also capture colors that need to be completed.  For example: sometimes  scan_scopes  is not broad enough to capture incomplete colors, but we don't want to generally want to scan so broadly when scanning an entire file for complete colors.  Scopes in this array contain usually  tmTheme  scope syntax, so you can include scopes or exclude scopes etc.  In the example below, we target  source.scss  and  source.sass , but only if they are not also scoped as  string  or  comment .       color_scanning :   [ \n         { \n             scan_completion_scopes :   [ \n                 source.scss -comment -string , \n                 source.sass -comment -string \n             ],", 
            "title": "color_scanning.scan_completion_scopes"
        }, 
        {
            "location": "/usage/#color_scanningallowed_colors", 
            "text": "allowed_colors  defines which colors will be scanned for in a specific file.  It is an array of strings where each strings specifies a color type or category of colors to scan for.     Value  Description      webcolors  CSS3 color names plus CSS4's  rebeccapurple .    hex  Hex colors in the form of  #RRGGBB .    hex_compressed  Hex colors in the form of  #RGB .    hexa  Hex colors with an alpha channel in the form  #RRGGBBAA  or  #AARRGGBB  if  use_hex_argb  is set to  true .    hexa_compressed  Hex colors with an alpha channel in the form  #RGBA  or  #ARGB  if  use_hex_argb  is set to  true .    rgb  RGB  colors in the form  rgb(255, 128, 0)  or  rgb(100%, 50%, 0%) .    rgba  RGBA  colors in the form  rgb(255, 128, 0, .5)  or  rgb(100%, 50%, 0%, .5) . It also supports CSS4's alpha as a percentage format:  rgb(100%, 50%, 0%, 50%) .    hsl  HSL  colors in the form  hsl(360, 100%, 50%) .    hsla  HSLA  colors in the form  hsla(360, 100%, 50%, .5) . It also supports CSS4's alpha as a percentage format:  hsla(360, 100%, 50%, 50%) .    gray  CSS4's gray format:  gray(255)  or  gray(100%) .    graya  CSS4's gray with alpha format:  gray(255, .5)  or  gray(100%, .5) .  It also supports alpha as a percentage format:  gray(100%, 50%) .    hwb  CSS4's  HWB  color format:  hwb(360, 50%, 100%) .    hwba  CSS4's  HWBA  color format:  hwb(360, 50%, 100%, 5)  or  hwb(360, 50%, 100%, 50%) .    css3  All CSS3 formats:  webcolors ,  hex ,  hex_compressed ,  rgb ,  rgba ,  hsl ,  hsla .    css4  All CSS4 formats:  css3 ,  gray ,  graya ,  hwb ,  hwba ,  hexa ,  hexa_compressed .    all  All color formats.          color_scanning :   [ \n         { \n             allowed_colors :   [ css3 ]", 
            "title": "color_scanning.allowed_colors"
        }, 
        {
            "location": "/usage/#color_scanninguse_hex_argb", 
            "text": "When scanning and processing hex  rgb  colors with alpha channels, process them as and output them with the alpha channel first opposed to at the end.  By default the value is  false .       color_scanning :   [ \n         { \n             use_hex_argb :   true", 
            "title": "color_scanning.use_hex_argb"
        }, 
        {
            "location": "/usage/#color_scanningcompress_hex_output", 
            "text": "When outputting hex formats compress the color if possible  #334455     #345 .  The default is  false .       color_scanning :   [ \n         { \n             compress_hex_output :   true", 
            "title": "color_scanning.compress_hex_output"
        }, 
        {
            "location": "/usage/#multiconf", 
            "text": "Certain settings that lend them self better to be setting up per OS or per host will be configured to use  multiconf .   multiconf  is a library that will parse a setting as a normal setting or a per OS and/or per host setting (if configured properly).  For the settings that have this enabled, you can optionally use the format below to specify the setting per OS or per host.  The optional  multiconf  format requires a dictionary with a special identifier #multiconf#   and a list of dictionaries identified by a qualifier of the form       qualifier name : qualifier value [; qualifier name : qualifier value ]...   For example, the following setting       user_home :   /home   would result in  get( user_home )  returning the value \"/home\" but it could also\nbe replaced with       user_home :    { \n                     #multiconf# :   [ \n                         { os:windows :   C:\\\\Users }, \n                         { os:linux;host:his_pc :   /home }, \n                         { os:linux;host:her_pc :   /home/her/special } \n                     ] \n     }   Now the same configuration file will provide different values depending on the\nmachine it's on. On an MS Windows machine the value returned by  get  will be\n\"C:\\Users\", and on a Linux machine with the host name  his_pc  the value will be\n\"/home\", etc.", 
            "title": "Multiconf"
        }, 
        {
            "location": "/contributing/", 
            "text": "Overview\n\ue157\n\n\n\n\n\n\n\n\nSublime\nVersions\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nST3\n\n\nFully supported and actively maintained.\n\n\n\n\n\n\n\n\nContribution from the community is encouraged and can be done in a variety of ways:\n\n\n\n\nBug reports.\n\n\nReviewing code.\n\n\nCode patches via pull requests.\n\n\nDocumentation improvements via pull requests.\n\n\n\n\nBug Reports\n\ue157\n\n\n\n\n\n\nPlease \nread the documentation\n and \nsearch the issue tracker\n to try to find the answer to your question \nbefore\n posting an issue.\n\n\n\n\n\n\nWhen an issue is created, a \ntemplate\n will be shown, please fill out the appropriate sections. If the template is not followed, the issue will be marked \nInvalid\n and closed.\n\n\n\n\n\n\nWhen creating an issue on the repository, please provide as much info as possible:\n\n\n\n\nProvide environment information by running \nPreferences-\nPackage Settings-\nColorHelper-\nSupport Info\n.  The information will be copied to the clipboard; paste the info in issue.\n\n\nErrors in console.\n\n\nDetailed description of the problem.\n\n\nExamples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.\n\n\nProvide links to 3\nrd\n party syntax highlighting package you are using if applicable.\n\n\n\n\nThe more info provided, the greater the chance someone will take the time to answer, implement, or fix the issue.\n\n\n\n\n\n\nBe prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.\n\n\n\n\n\n\nReviewing Code\n\ue157\n\n\nTake part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.\n\n\nPull Requests\n\ue157\n\n\nPull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.\n\n\n\n\n\n\nPlease describe the change in as much detail as possible so I can understand what is being added or modified.\n\n\n\n\n\n\nIf you are solving a bug that does not already have an issue, please describe the bug in detail and provide info on how to reproduce if applicable (this is good for me and others to reference later when verifying the issue has been resolved).\n\n\n\n\n\n\nPlease reference and link related open bugs or feature requests in this pull if applicable.\n\n\n\n\n\n\nMake sure you've documented or updated the existing documentation if introducing a new feature or modifying the behavior of an existing feature that a user needs to be aware of.  I will not accept new features or changes to existing features if you have not provided documentation describing the feature.\n\n\n\n\n\n\nContinuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.\n\n\nRunning Validation Tests\n\ue157\n\n\n\n\nTip\n\n\nIf you are running Sublime on a Mac OS or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):\n\n\nchmod +x run_tests.sh\n./run_tests.sh\n\n\n\n\n\n\n\nThere are a couple of dependencies that must be present before running the tests.\n\n\n\n\n\n\nAs \nST3\n is the only current, actively supported version, Python 3.3 must be used to validate the tests.\n\n\n\n\n\n\nUnit tests are run with \npytest\n.  You can install \npytest\n via:\n\n\npip install pytest\n\n\n\n\n\nThe tests should be run from the root folder of the plugin by using the following command:\n\n\npy.test .\n\n\n\n\n\n\n\n\n\nLinting is performed on the entire project with \nflake8\n, \nflake8-docstrings\n, and \npep8-naming\n.  These can be installed via:\n\n\npip install flake8\npip install flake8-docstrings\npip install pep8-naming\n\n\n\n\n\nLinting is performed with the following command:\n\n\nflake8 .\n\n\n\n\n\n\n\n\n\nDocumentation Improvements\n\ue157\n\n\nA ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn't be any need to run validation tests if only updating documentation.\n\n\nYou don't have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of \nMkDocs\n, the \nMaterial theme\n, and \nPyMdown Extensions\n to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is \nmkdocs serve\n from the root directory. You can then view the documents at \nlocalhost:8000\n.", 
            "title": "Contributing &amp; Support"
        }, 
        {
            "location": "/contributing/#overview", 
            "text": "Sublime Versions  Description      ST3  Fully supported and actively maintained.     Contribution from the community is encouraged and can be done in a variety of ways:   Bug reports.  Reviewing code.  Code patches via pull requests.  Documentation improvements via pull requests.", 
            "title": "Overview"
        }, 
        {
            "location": "/contributing/#bug-reports", 
            "text": "Please  read the documentation  and  search the issue tracker  to try to find the answer to your question  before  posting an issue.    When an issue is created, a  template  will be shown, please fill out the appropriate sections. If the template is not followed, the issue will be marked  Invalid  and closed.    When creating an issue on the repository, please provide as much info as possible:   Provide environment information by running  Preferences- Package Settings- ColorHelper- Support Info .  The information will be copied to the clipboard; paste the info in issue.  Errors in console.  Detailed description of the problem.  Examples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.  Provide links to 3 rd  party syntax highlighting package you are using if applicable.   The more info provided, the greater the chance someone will take the time to answer, implement, or fix the issue.    Be prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.", 
            "title": "Bug Reports"
        }, 
        {
            "location": "/contributing/#reviewing-code", 
            "text": "Take part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.", 
            "title": "Reviewing Code"
        }, 
        {
            "location": "/contributing/#pull-requests", 
            "text": "Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.    Please describe the change in as much detail as possible so I can understand what is being added or modified.    If you are solving a bug that does not already have an issue, please describe the bug in detail and provide info on how to reproduce if applicable (this is good for me and others to reference later when verifying the issue has been resolved).    Please reference and link related open bugs or feature requests in this pull if applicable.    Make sure you've documented or updated the existing documentation if introducing a new feature or modifying the behavior of an existing feature that a user needs to be aware of.  I will not accept new features or changes to existing features if you have not provided documentation describing the feature.    Continuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.", 
            "title": "Pull Requests"
        }, 
        {
            "location": "/contributing/#running-validation-tests", 
            "text": "Tip  If you are running Sublime on a Mac OS or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):  chmod +x run_tests.sh\n./run_tests.sh   There are a couple of dependencies that must be present before running the tests.    As  ST3  is the only current, actively supported version, Python 3.3 must be used to validate the tests.    Unit tests are run with  pytest .  You can install  pytest  via:  pip install pytest  The tests should be run from the root folder of the plugin by using the following command:  py.test .    Linting is performed on the entire project with  flake8 ,  flake8-docstrings , and  pep8-naming .  These can be installed via:  pip install flake8\npip install flake8-docstrings\npip install pep8-naming  Linting is performed with the following command:  flake8 .", 
            "title": "Running Validation Tests"
        }, 
        {
            "location": "/contributing/#documentation-improvements", 
            "text": "A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn't be any need to run validation tests if only updating documentation.  You don't have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of  MkDocs , the  Material theme , and  PyMdown Extensions  to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is  mkdocs serve  from the root directory. You can then view the documents at  localhost:8000 .", 
            "title": "Documentation Improvements"
        }, 
        {
            "location": "/license/", 
            "text": "ColorHelper is released under the MIT license.\n\n\nCopyright \n 2015 - 2017 Isaac Muse \n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE", 
            "title": "License"
        }
    ]
}